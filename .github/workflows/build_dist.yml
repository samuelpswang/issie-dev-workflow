on:
  # workflow_dispatch:
  #   inputs:
  #     release:
  #       description: 'Upload binaries to Releases page?'
  #       required: true
  #       type: boolean
  #     tag:
  #       description: 'Upload binaries to which tag?'
  #       required: true
  #       type: string
  push:
    # tags:
    #   - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  # update_current_release:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Get current release data
  #     id: latest_release
  #     uses: KevinRohn/github-full-release-data@v2
  #     with:
  #       repository: samuelpswang/issie-dev-workflow
  #       token: ${{ secrets.GITHUB_TOKEN }}
  #       version: latest
  #   - name: Check if this tag is a patch
  #     id: is_patch
  #     uses: actions/github-script@v7
  #     env:
  #       prev_tag: ${{ steps.latest_release.outputs.tag_name }}
  #       curr_tag: ${{ github.event_name == 'push' && github.ref_name || inputs.tag }}
  #     with:
  #       script: |
  #         const prev_tag = process.env.prev_tag;
  #         const curr_tag = process.env.curr_tag;
  #         const [prev_major, prev_minor] = prev_tag.split('.');
  #         const [curr_major, curr_minor] = curr_tag.split('.');
  #         return (prev_major === curr_major) && (prev_minor === curr_minor);
  #       result-encoding: string
  #   - name: Delete current release
  #     if: ${{ steps.is_patch.outputs.result == 'true' }}
  #     uses: liudonghua123/delete-release-action@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       release_id: ${{ steps.latest_release.outputs.id }}
  #   - name: Format current release body (hack)
  #     if: ${{ steps.is_patch.outputs.result == 'true' }}
  #     id: body_format
  #     uses: actions/github-script@v7
  #     env:
  #       body: ${{ steps.latest_release.outputs.body }}
  #     with:
  #       script: |
  #         const body = process.env.body;
  #         return body.slice(1,-1);
  #       result-encoding: string
  #   - name: Re-create current release with new tag
  #     if: ${{ steps.is_patch.outputs.result == 'true' }}
  #     uses: softprops/action-gh-release@v2
  #     with:
  #       tag_name: ${{ github.event_name == 'push' && github.ref_name || inputs.tag }}
  #       name: ${{ steps.latest_release.outputs.name }}
  #       body: ${{ steps.body_format.outputs.result }}
  #   - name: Create draft release for new major/minor version
  #     if: ${{ steps.is_patch.outputs.result == 'false'}}
  #     uses: softprops/action-gh-release@v2
  #     with:
  #       draft: true
  #       body: New minor version pushed, release text work in progress.

  build_dist:
    runs-on: macos-latest
    # needs: update_current_release
    steps:
    - name: Checkout the repo
      uses: actions/checkout@v5
    - name: Install the Apple certificate and provisioning profile
      # uses: apple-actions/import-codesign-certs@v5
      # with: 
      #   p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #   p12-password: ${{ secrets.P12_PASSWORD }}
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/issie.provisionprofile
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        # security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
    - name: Set up .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    - name: Restore .NET tools and node packages - build.sh
      run: ./build.sh -t Build
    - name: Build app - build_dist.sh
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: ./build_dist.sh
    # - name: Deploy to releases page
    #   uses: softprops/action-gh-release@v2
    #   if: ${{ github.event_name == 'push' || inputs.release }}
    #   with:
    #     tag_name: ${{ github.event_name == 'push' && github.ref_name || inputs.tag }}
    #     files: dist/*

  # build_dist_linux_x64:
  #   runs-on: ubuntu-latest
  #   needs: update_current_release
  #   steps:
  #   - name: Checkout the repo
  #     uses: actions/checkout@v5
  #   - name: Set up .NET Core
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: '8.0.x'
  #   - name: Restore .NET tools and node packages - build.sh
  #     run: ./build.sh -t Build
  #   - name: Build app - build_dist_linux_x64.sh
  #     run: ./build_dist_linux_x64.sh
  #   - name: Deploy to releases page
  #     uses: softprops/action-gh-release@v2
  #     if: ${{ github.event_name == 'push' || inputs.release }}
  #     with:
  #       tag_name: ${{ github.event_name == 'push' && github.ref_name || inputs.tag }}
  #       files: dist/*

# Force change 1
